# src/frontend//src/App.test.tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


# src/frontend//src/App.tsx
// src/App.tsx
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Dashboard from './Dashboard';
import Leaderboard from './Leaderboard';
import Profile from './Profil';

const App: React.FC = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Dashboard />} />
        <Route path="/leaderboard" element={<Leaderboard />} />
        <Route path="/profile" element={<Profile />} />
      </Routes>
    </Router>
  );
};

export default App;


# src/frontend//src/Calendar.tsx
// src/components/Calendar.tsx
import React from 'react';
import { Card, CardContent, Typography } from '@mui/material';

const Calendar: React.FC = () => {
  return (
    <Card sx={{ background: 'rgba(33, 33, 33, 0.9)', color: '#fff' }}>
      <CardContent>
        <Typography variant="h6" sx={{ fontFamily: 'Orbitron, sans-serif' }}>
          Calendrier
        </Typography>
        {/* Add calendar code here */}
      </CardContent>
    </Card>
  );
};

export default Calendar;


# src/frontend//src/CodeLines.tsx
// src/components/CodeLines.tsx
import React, { useEffect, useState } from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const generateRandomData = () => {
  return Array.from({ length: 12 }, (_, i) => ({
    name: `Month ${i + 1}`,
    lines: Math.floor(Math.random() * 2000),
  }));
};

const CodeLines: React.FC = () => {
  const [data, setData] = useState(generateRandomData());

  useEffect(() => {
    const interval = setInterval(() => {
      setData(generateRandomData());
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <Card sx={{ background: 'rgba(33, 33, 33, 0.9)', color: '#fff' }}>
      <CardContent>
        <Typography variant="h6" sx={{ fontFamily: 'Orbitron, sans-serif' }}>
          Nombre de lignes ecrites
        </Typography>
        <ResponsiveContainer width="100%" height={300}>
          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Line type="monotone" dataKey="lines" stroke="#82ca9d" activeDot={{ r: 8 }} />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};

export default CodeLines;


# src/frontend//src/CompilationErrors.tsx
// src/components/CompilationErrors.tsx
import React, { useEffect, useState } from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const generateRandomData = () => {
  return Array.from({ length: 12 }, (_, i) => ({
    name: `Month ${i + 1}`,
    errors: Math.floor(Math.random() * 50),
  }));
};

const CompilationErrors: React.FC = () => {
  const [data, setData] = useState(generateRandomData());

  useEffect(() => {
    const interval = setInterval(() => {
      setData(generateRandomData());
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <Card sx={{ background: 'rgba(33, 33, 33, 0.9)', color: '#fff' }}>
      <CardContent>
        <Typography variant="h6" sx={{ fontFamily: 'Orbitron, sans-serif' }}>
          Compilation erreurs
        </Typography>
        <ResponsiveContainer width="100%" height={300}>
          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Line type="monotone" dataKey="errors" stroke="#ff7300" activeDot={{ r: 8 }} />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};

export default CompilationErrors;


# src/frontend//src/Dashboard.tsx
// src/pages/Dashboard.tsx
import React from 'react';
import { Grid } from '@mui/material';
import Layout from './Layout';
import ExperienceChart from './ExperienceChart';
import CompilationErrors from './CompilationErrors';
import CodeLines from './CodeLines';
import Calendar from './Calendar';
import Missions from './Missions';
import WinsLosses from './WinsLosses';
import GoldEarned from './GoldEarned';

import { GetDashboard } from './Services/userService';

// Function to call GetDashboard and log the result
const logDashboard = async () => {
  const result = await GetDashboard("MAXIMUS");
  console.log("Get Dashboard: ", result);
};

// Call the logDashboard function
logDashboard();

const Dashboard: React.FC = () => {
  return (
    <Layout>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <ExperienceChart />
        </Grid>
        <Grid item xs={6}>
          <CompilationErrors />
        </Grid>
        <Grid item xs={6}>
          <CodeLines />
        </Grid>
        <Grid item xs={12}>
          <Calendar />
        </Grid>
        <Grid item xs={12}>
          <Missions />
        </Grid>
        <Grid item xs={6}>
          <WinsLosses />
        </Grid>
        <Grid item xs={6}>
          <GoldEarned />
        </Grid>
      </Grid>
    </Layout>
  );
};

export default Dashboard;


# src/frontend//src/ExperienceChart.tsx
// src/components/ExperienceChart.tsx
import React, { useEffect, useState } from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';


const generateRandomData = () => {
  return Array.from({ length: 12 }, (_, i) => ({
    name: `Month ${i + 1}`,
    exp: Math.floor(Math.random() * 100),
  }));
};

const ExperienceChart: React.FC = () => {
  const [data, setData] = useState(generateRandomData());

  useEffect(() => {
    const interval = setInterval(() => {
      setData(generateRandomData());
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <Card sx={{ background: 'rgba(33, 33, 33, 0.9)', color: '#fff' }}>
      <CardContent>
        <Typography variant="h6" sx={{ fontFamily: 'Orbitron, sans-serif' }}>
          Nombre d'Exp gagné
        </Typography>
        <ResponsiveContainer width="100%" height={300}>
          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Line type="monotone" dataKey="exp" stroke="#8884d8" activeDot={{ r: 8 }} />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};

export default ExperienceChart;


# src/frontend//src/GoldEarned.tsx
// src/components/GoldEarned.tsx
import React, { useEffect, useState } from 'react';
import { Card, CardContent, Typography } from '@mui/material';

const generateRandomData = () => Math.floor(Math.random() * 1000);

const GoldEarned: React.FC = () => {
  const [gold, setGold] = useState(generateRandomData());

  useEffect(() => {
    const interval = setInterval(() => {
      setGold(generateRandomData());
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <Card sx={{ background: 'rgba(33, 33, 33, 0.9)', color: '#fff' }}>
      <CardContent>
        <Typography variant="h6" sx={{ fontFamily: 'Orbitron, sans-serif' }}>
          Nombre de gold gagné 24H
        </Typography>
        <Typography variant="h4" mt={2} sx={{ color: '#FFD700' }}>
          {gold}
        </Typography>
      </CardContent>
    </Card>
  );
};

export default GoldEarned;


# src/frontend//src/Layout.tsx
// src/components/Layout.tsx
import React, { ReactNode } from 'react';
import { AppBar, Toolbar, Typography, Container, Box, Button } from '@mui/material';
import { Link } from 'react-router-dom';

interface LayoutProps {
  children: ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
      <AppBar position="static" sx={{ background: 'rgba(0, 0, 0, 0.8)' }}>
        <Toolbar>
          <Typography variant="h6" sx={{ fontFamily: 'Orbitron, sans-serif', letterSpacing: 2 }}>
            Game Dashboard
          </Typography>
          <Box sx={{ flexGrow: 1 }} />
          <Button color="inherit" component={Link} to="/">
            Accueil
          </Button>
          <Button color="inherit" component={Link} to="/leaderboard">
            LeaderBoard
          </Button>
          <Button color="inherit" component={Link} to="/profile">
            Profil
          </Button>
        </Toolbar>
      </AppBar>
      <Container sx={{ flex: 1, py: 3 }}>
        {children}
      </Container>
    </Box>
  );
};

export default Layout;


# src/frontend//src/Leaderboard.tsx
// src/pages/Leaderboard.tsx
import React from 'react';
import { Card, CardContent, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Box, Paper } from '@mui/material';
import Layout from './Layout';
import { styled } from '@mui/system';

const leaderboardData = [
  { id: 1, name: 'GUNNER', score: 5000 },
  { id: 2, name: 'BLADER', score: 4500 },
  { id: 3, name: 'SNIPER', score: 4000 },
  // Add more players as needed
];

const StyledTableCell = styled(TableCell)({
  color: '#fff',
  fontFamily: 'Orbitron, sans-serif',
  fontSize: '1rem',
  borderBottom: '1px solid rgba(255, 255, 255, 0.2)',
});

const StyledTableRow = styled(TableRow)({
  '&:nth-of-type(odd)': {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
  },
  '&:hover': {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
  },
});

const Leaderboard: React.FC = () => {
  return (
    <Layout>
      <Card sx={{ background: 'linear-gradient(135deg, #1e1e1e, #121212)', color: '#fff', minHeight: '70vh', borderRadius: 2, boxShadow: '0 10px 20px rgba(0, 0, 0, 0.5)' }}>
        <CardContent>
          <Typography variant="h4" align="center" sx={{ fontFamily: 'Orbitron, sans-serif', mb: 3, color: '#FFD700' }}>
            LeaderBoard
          </Typography>
          <TableContainer component={Paper} sx={{ background: 'rgba(255, 255, 255, 0.1)' }}>
            <Table>
              <TableHead>
                <TableRow>
                  <StyledTableCell align="center">Rank</StyledTableCell>
                  <StyledTableCell align="center">Player</StyledTableCell>
                  <StyledTableCell align="center">Score</StyledTableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {leaderboardData.map((player, index) => (
                  <StyledTableRow key={player.id}>
                    <StyledTableCell align="center">{index + 1}</StyledTableCell>
                    <StyledTableCell align="center">{player.name}</StyledTableCell>
                    <StyledTableCell align="center">{player.score}</StyledTableCell>
                  </StyledTableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>
    </Layout>
  );
};

export default Leaderboard;


# src/frontend//src/Missions.tsx
// src/components/Missions.tsx
import React from 'react';
import { Card, CardContent, Typography, List, ListItem, ListItemText, ListItemIcon, LinearProgress, Box } from '@mui/material';
import WorkIcon from '@mui/icons-material/Work';

const missions = [
  { id: 78546, exp: 15, progress: 50 },
  { id: 78547, exp: 30, progress: 75 },
  // Add more missions as needed
];

const Missions: React.FC = () => {
  return (
    <Card sx={{ background: 'rgba(33, 33, 33, 0.9)', color: '#fff' }}>
      <CardContent>
        <Typography variant="h6" sx={{ fontFamily: 'Orbitron, sans-serif' }}>
          Missions
        </Typography>
        <List>
          {missions.map((mission) => (
            <ListItem key={mission.id}>
              <ListItemIcon>
                <WorkIcon sx={{ color: '#fff' }} />
              </ListItemIcon>
              <ListItemText
                primary={`Finir ticket #${mission.id}`}
                secondary={
                  <Box>
                    {`${mission.exp} exp`}
                    <LinearProgress variant="determinate" value={mission.progress} sx={{ mt: 1 }} />
                  </Box>
                }
              />
            </ListItem>
          ))}
        </List>
      </CardContent>
    </Card>
  );
};

export default Missions;


# src/frontend//src/Profil.tsx
// src/pages/Profil.tsx
import React from 'react';
import { Card, CardContent, Typography, Box, Grid, Avatar, Paper, LinearProgress } from '@mui/material';
import Layout from './Layout';
import profileImage from './assets/profil.webp';
import itemImage1 from './assets/profil.webp';
import itemImage2 from './assets/profil.webp';
import itemImage3 from './assets/profil.webp';
import itemImage4 from './assets/profil.webp';
import itemImage5 from './assets/profil.webp';

const items = [
  { name: 'Sword of Destiny', icon: itemImage1 },
  { name: 'Shield of Valor', icon: itemImage2 },
  { name: 'Potion of Healing', icon: itemImage3 },
  { name: 'Ring of Power', icon: itemImage4 },
  { name: 'Magic Wand', icon: itemImage5 },
];

const Profile: React.FC = () => {
  return (
    <Layout>
      <Card
        sx={{
          background: 'linear-gradient(135deg, #1e1e1e, #121212)',
          color: '#fff',
          minHeight: '70vh',
          borderRadius: 2,
          boxShadow: '0 10px 20px rgba(0, 0, 0, 0.5)',
          p: 3,
        }}
      >
        <CardContent>
          <Typography
            variant="h4"
            align="center"
            sx={{ fontFamily: 'Orbitron, sans-serif', mb: 3, color: '#FFD700' }}
          >
            Profil
          </Typography>
          <Grid container spacing={3}>
            <Grid item xs={12} sm={4}>
              <Box display="flex" justifyContent="center" alignItems="center" flexDirection="column">
                <Avatar src={profileImage} sx={{ width: 150, height: 150, mb: 2 }} />
                <Typography variant="h6">sei_dnl</Typography>
                <Typography variant="body1">Level: 20</Typography>
                <Box width="100%" mt={1}>
                  <Typography variant="body2">Health</Typography>
                  <LinearProgress variant="determinate" value={80} sx={{ height: 10, borderRadius: 5 }} />
                </Box>
              </Box>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Box display="flex" justifyContent="center">
                <img
                  src={profileImage}
                  alt="Avatar"
                  style={{ borderRadius: '10px', maxHeight: '400px', maxWidth: '100%', border: '2px solid #FFD700' }}
                />
              </Box>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Box display="flex" justifyContent="center" alignItems="center" flexDirection="column" gap={2}>
                <Box width="100%">
                  <Typography variant="body2">XP</Typography>
                  <LinearProgress variant="determinate" value={(1500 / 2000) * 100} sx={{ height: 10, borderRadius: 5, mb: 1 }} />
                  <Typography variant="body2">1500 / 2000</Typography>
                </Box>
                <Box width="100%">
                  <Typography variant="body2" sx={{ color: '#FFD700' }}>Gold</Typography>
                  <Typography variant="h5" sx={{ color: '#FFD700' }}>300</Typography>
                </Box>
                <Box width="100%">
                  <Typography variant="body2" sx={{ color: '#4caf50' }}>Wins</Typography>
                  <Typography variant="h5" sx={{ color: '#4caf50' }}>45</Typography>
                </Box>
                <Box width="100%">
                  <Typography variant="body2" sx={{ color: '#f44336' }}>Losses</Typography>
                  <Typography variant="h5" sx={{ color: '#f44336' }}>10</Typography>
                </Box>
              </Box>
            </Grid>
            <Grid item xs={12}>
              <Paper
                sx={{
                  p: 2,
                  mt: 2,
                  display: 'flex',
                  justifyContent: 'space-around',
                  background: 'rgba(255, 255, 255, 0.1)',
                  color: '#fff',
                  borderRadius: 2,
                }}
              >
                {items.map((item, index) => (
                  <Box key={index} display="flex" flexDirection="column" alignItems="center">
                    <Avatar src={item.icon} sx={{ width: 56, height: 56, mb: 1 }} />
                    <Typography variant="body2" align="center">
                      {item.name}
                    </Typography>
                  </Box>
                ))}
              </Paper>
            </Grid>
          </Grid>
        </CardContent>
      </Card>
    </Layout>
  );
};

export default Profile;


# src/frontend//src/Services/userService.ts
import axios from 'axios';

export const GetDashboard = async (username: string) => 
{
    const loginInput = { username };

    try
    {
        const response = await axios.post('http://dockerserviceclient:9000/api/user-dashboard', loginInput);
        return response.data;   
    }
    catch (error)
    {
        console.log(error)
    }
    
};

# src/frontend//src/WinsLosses.tsx
// src/components/WinsLosses.tsx
import React, { useEffect, useState } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';

const generateRandomData = () => ({
  wins: Math.floor(Math.random() * 10),
  losses: Math.floor(Math.random() * 10),
});

const WinsLosses: React.FC = () => {
  const [data, setData] = useState(generateRandomData());

  useEffect(() => {
    const interval = setInterval(() => {
      setData(generateRandomData());
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <Card sx={{ background: 'rgba(33, 33, 33, 0.9)', color: '#fff' }}>
      <CardContent>
        <Typography variant="h6" sx={{ fontFamily: 'Orbitron, sans-serif' }}>
          Victoires / Défaites 24H
        </Typography>
        <Box display="flex" justifyContent="space-around" alignItems="center" mt={2}>
          <Typography variant="h4" color="green">
            {data.wins}
          </Typography>
          <Typography variant="h4" color="red">
            {data.losses}
          </Typography>
        </Box>
      </CardContent>
    </Card>
  );
};

export default WinsLosses;


# src/frontend//src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


# src/frontend//src/react-app-env.d.ts
/// <reference types="react-scripts" />


# src/frontend//src/reportWebVitals.ts
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


# src/frontend//src/setupTests.ts
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


